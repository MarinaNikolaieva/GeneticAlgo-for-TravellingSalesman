/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GTSPack;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Random;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.Graphics2D;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;

/**
 *
 * @author Marina Nik
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        InputButton = new javax.swing.JButton();
        DisplayButton = new javax.swing.JButton();
        OutputButton = new javax.swing.JButton();
        RunButton = new javax.swing.JButton();
        TextField = new javax.swing.JTextField();
        TextPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        InputButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        InputButton.setText("Input data");
        InputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputButtonActionPerformed(evt);
            }
        });

        DisplayButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        DisplayButton.setText("Display");
        DisplayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayButtonActionPerformed(evt);
            }
        });

        OutputButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        OutputButton.setText("Output");
        OutputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputButtonActionPerformed(evt);
            }
        });

        RunButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        RunButton.setText("Run");
        RunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunButtonActionPerformed(evt);
            }
        });

        TextField.setEditable(false);
        TextField.setBackground(new java.awt.Color(255, 255, 255));
        TextField.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        TextPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout TextPanelLayout = new javax.swing.GroupLayout(TextPanel);
        TextPanel.setLayout(TextPanelLayout);
        TextPanelLayout.setHorizontalGroup(
            TextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        TextPanelLayout.setVerticalGroup(
            TextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 348, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TextPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TextField)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(InputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DisplayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RunButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(OutputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 166, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(InputButton, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(DisplayButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RunButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(OutputButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files", "txt");
        fc.setFileFilter(filter);
        int val = fc.showOpenDialog(this);
        if (val == JFileChooser.APPROVE_OPTION){
            File file = fc.getSelectedFile();
            try{
                Scanner scan = new Scanner(file);
                int counter = 0;
                while(scan.hasNext()){
                    String[] temp = scan.nextLine().split(" ");
                    CityGene tem = new CityGene(counter, Integer.parseInt(temp[0]), Integer.parseInt(temp[1]));
                    counter++;
                    cities.add(tem);
                }
                scan.close();
            }
            catch(Exception ex){
                //TextPanel.setText("Something went wrong! Import was cancelled!");
            }
        }
        elite = (int)(cities.size() * 0.2);
    }//GEN-LAST:event_InputButtonActionPerformed

    private void DisplayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayButtonActionPerformed
        // TODO add your handling code here:
        if (!copy.isEmpty()){        
            graph.setColor(Color.WHITE);
            for (int i = 0; i < cities.size(); i++){
                Rectangle2D.Double rect = new Rectangle2D.Double(cities.get(i).getX() * scale, cities.get(i).getY() * scale, 5, 5);
                graph.draw(rect);
            }
            for (int i = 0; i < copy.size() - 1; i++){
                Line2D.Double lineClear = new Line2D.Double(copy.get(i).getX() * scale, copy.get(i).getY() * scale, copy.get(i + 1).getX() * scale, copy.get(i + 1).getY() * scale);
                graph.draw(lineClear);
            }
            Line2D.Double lineClear = new Line2D.Double(copy.get(0).getX() * scale, copy.get(0).getY() * scale, copy.get(copy.size() - 1).getX() * scale, copy.get(copy.size() - 1).getY() * scale);
            graph.draw(lineClear);
        }
        graph.setColor(Color.BLACK);
        
        if (!cities.isEmpty()){
            graph = (Graphics2D)TextPanel.getGraphics();
            double mx = 0.0;
            double my = 0.0;
            for (int i = 0; i < cities.size(); i++){
                if (cities.get(i).getX() >= mx)
                    mx = cities.get(i).getX();
                if (cities.get(i).getY() >= my)
                    my = cities.get(i).getY();
            }
            double xScale = 1100 / mx;
            double yScale = 600 / my;
            scale = xScale < yScale ? xScale : yScale;
            
            for (int i = 0; i < cities.size(); i++){
                Rectangle2D.Double rect = new Rectangle2D.Double(cities.get(i).getX() * scale, cities.get(i).getY() * scale, 5, 5);
                graph.draw(rect);
            }
            TextPanel.paintComponents(graph);
            TextPanel.setVisible(true);
        }
        
        if (!finalRoute.isEmpty()){
            graph.setColor(Color.RED);
            Rectangle2D.Double rect = new Rectangle2D.Double(finalRoute.get(0).getX() * scale, finalRoute.get(0).getY() * scale, 5, 5);
            graph.draw(rect);
            graph.setColor(Color.BLACK);
            for (int i = 0; i < finalRoute.size() - 1; i++){
                Line2D.Double line = new Line2D.Double(finalRoute.get(i).getX() * scale, finalRoute.get(i).getY() * scale, finalRoute.get(i + 1).getX() * scale, finalRoute.get(i + 1).getY() * scale);
                graph.draw(line);
            }
            Line2D.Double line = new Line2D.Double(finalRoute.get(0).getX() * scale, finalRoute.get(0).getY() * scale, finalRoute.get(finalRoute.size() - 1).getX() * scale, finalRoute.get(finalRoute.size() - 1).getY() * scale);
            graph.draw(line);
        }
    }//GEN-LAST:event_DisplayButtonActionPerformed

    private void OutputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputButtonActionPerformed
        // TODO add your handling code here:
        if (!finalRoute.isEmpty()){
            TextField.setText("Init distance: " + initDist + ", Final distance: " + finalDist + ". Route: ");
            for (int i = 0; i < finalRoute.size(); i++)
                TextField.setText(TextField.getText() + finalRoute.get(i).getID() + " ");
        }
    }//GEN-LAST:event_OutputButtonActionPerformed

    private void RunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunButtonActionPerformed
        // TODO add your handling code here:
        copy.addAll(finalRoute);  //keeping the previous best route for repainting
        ArrayList<ArrayList<CityGene>> initPopulation = formPopulation(populationSize);
        initDist = 1 / getFitnesses(initPopulation).get(0).getVal();
        for (int i = 0; i < generationNumber; i++){
            initPopulation = nextGen(initPopulation, elite, mutationRate);
        }
        finalDist = 1 / getFitnesses(initPopulation).get(0).getVal();
        int bestRouteIndex = getFitnesses(initPopulation).get(0).getID();
        finalRoute = initPopulation.get(bestRouteIndex);
    }//GEN-LAST:event_RunButtonActionPerformed

    private ArrayList<CityGene> createRandRoute(){
        if (!cities.isEmpty()){
            ArrayList<CityGene> temp = new ArrayList<>();
            temp.addAll(cities);
            Collections.shuffle(temp);
            return temp;
        }
        return null;
    }
    
    private ArrayList<ArrayList<CityGene>> formPopulation(int sizeOfPopulation){
        ArrayList<ArrayList<CityGene>> population = new ArrayList<>();
        for (int i = 0; i < sizeOfPopulation; i++){
            population.add(createRandRoute());
        }
        return population;
    }
    
    private ArrayList<PairClass> getFitnesses(ArrayList<ArrayList<CityGene>> popul){
        ArrayList<PairClass> fitnesses = new ArrayList<>();
        for (int i = 0; i < popul.size(); i++){
            FitnessFunc f = new FitnessFunc(popul.get(i));
            fitnesses.add(new PairClass(i, f.getFitness()));
        }
        Collections.sort(fitnesses, new CustomComparator());
        Collections.reverse(fitnesses);
        return fitnesses;
    }
    
    private ArrayList<Integer> selection(ArrayList<PairClass> p, int elit){  //returning the IDs of the best solutions
        ArrayList<Integer> selected = new ArrayList<>();
        ArrayList<Double> cumulative = new ArrayList<>();
        double totalSum = 0.0;
        for (int i = 0; i < p.size(); i++){
            double cumulat = 0.0;
            for (int j = 0; j <= i; j++){
                cumulat += p.get(j).getVal();
            }
            cumulative.add(cumulat);
            totalSum += p.get(i).getVal();
        }
        
        ArrayList<Double> weights = new ArrayList<>();
        for (int i = 0; i < p.size(); i++){
            weights.add(100 * cumulative.get(i) / totalSum);
        }
        
        for (int i = 0; i < elit; i++){  //adding the best individuals
            selected.add(p.get(i).getID());
        }
        
        Random rand = new Random();  //selecting random individuals
        for (int i = 0; i < p.size() - elit; i++){
            double picker = 100 * rand.nextDouble();
            for (int j = 0; j < p.size(); j++){
                if (picker <= weights.get(j) && !selected.contains(p.get(j).getID())){
                    selected.add(p.get(j).getID());
                    break;
                }
            }
        }
        
        return selected;
    }
    
    private ArrayList<ArrayList<CityGene>> matingPoolMaking(ArrayList<ArrayList<CityGene>> popul, ArrayList<Integer> selected){
        ArrayList<ArrayList<CityGene>> matingPool = new ArrayList<>();
        for (int i = 0; i < selected.size(); i++){
            int index = selected.get(i);
            matingPool.add(popul.get(index));
        }
        return matingPool;
    }
    
    private ArrayList<CityGene> breed(ArrayList<CityGene> parent1, ArrayList<CityGene> parent2){
        ArrayList<CityGene> child = new ArrayList<>();
        ArrayList<CityGene> childPart1 = new ArrayList<>();
        ArrayList<CityGene> childPart2 = new ArrayList<>();
        
        Random rand = new Random();
        int geneA = (int)(rand.nextDouble() * parent1.size());
        int geneB = (int)(rand.nextDouble() * parent1.size());
        
        int start = Math.min(geneA, geneB);
        int end = Math.max(geneA, geneB);
        for (int i = start; i < end; i++)
            childPart1.add(parent1.get(i));
        
        for (int i = 0; i < parent2.size(); i++){
            if (!childPart1.contains(parent2.get(i)))
                childPart2.add(parent2.get(i));
        }      
        
        for (int i = 0; i < start; i++)
            child.add(childPart2.get(i));
        for (int i = 0; i < childPart1.size(); i++)
            child.add(childPart1.get(i));
        for (int i = start; i < childPart2.size(); i++)
            child.add(childPart2.get(i));
        
        return child;
    }
    
    private ArrayList<ArrayList<CityGene>> breedPopulation(ArrayList<ArrayList<CityGene>> matePool, int elit){
        ArrayList<ArrayList<CityGene>> children = new ArrayList<>();
        
        for (int i = 0; i < elit; i++)
            children.add(matePool.get(i));
        
        Collections.shuffle(matePool);
        int len = matePool.size() - elit;
        for (int i = 0; i < len; i++){
            ArrayList<CityGene> child = breed(matePool.get(i), matePool.get(matePool.size() - 1 - i));
            children.add(child);
        }
        
        return children;    
    }
    
    private ArrayList<CityGene> mutate(ArrayList<CityGene> individ, double mutRate){
        Random rand = new Random();
        for (int i = 0; i < individ.size(); i++){
            if (rand.nextDouble() < mutRate){
                int swapWith = (int)(rand.nextDouble() * individ.size());
                CityGene city1 = individ.get(i);
                CityGene city2 = individ.get(swapWith);
                
                individ.set(i, city2);
                individ.set(swapWith, city1);
            }
        }
        return individ;
    }
    
    private ArrayList<ArrayList<CityGene>> mutatePopulation(ArrayList<ArrayList<CityGene>> popul, double mutRate){
        ArrayList<ArrayList<CityGene>> mutatedPopul = new ArrayList<>();
        for (int i = 0; i < popul.size(); i++){
            ArrayList<CityGene> mutant = mutate(popul.get(i), mutRate);
            mutatedPopul.add(mutant);
        }
        return mutatedPopul;
    }
    
    private ArrayList<ArrayList<CityGene>> nextGen(ArrayList<ArrayList<CityGene>> curGen, int elit, double mutRate){
        ArrayList<PairClass> fitnesses = getFitnesses(curGen);
        ArrayList<Integer> selected = selection(fitnesses, elit);
        ArrayList<ArrayList<CityGene>> matingPool = matingPoolMaking(curGen, selected);
        ArrayList<ArrayList<CityGene>> children = breedPopulation(matingPool, elit);
        ArrayList<ArrayList<CityGene>> nextGener = mutatePopulation(children, mutRate);
        return nextGener;
    }
    
    public class CustomComparator implements Comparator<PairClass> {
        @Override
        public int compare(PairClass o1, PairClass o2) {
            return Double.compare(o1.getVal(), o2.getVal());
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
                cities = new ArrayList<>();
                scale = 1.0;
                TextPanel.setSize(1100, 600);
                finalRoute = new ArrayList<>();
                graph = (Graphics2D)TextPanel.getGraphics();
                graph.translate(0.0, 600.0);
                graph.scale(1, -1);
                copy = new ArrayList<>();
                elite = 0;
                mutationRate = 0.01;
                generationNumber = 5000;
                populationSize = 100;
                initDist = 0.0;
                finalDist = 0.0;
            }
        });
    }

    private static ArrayList<CityGene> cities;
    private static double scale;
    private static ArrayList<CityGene> finalRoute;
    private static Graphics2D graph;
    private static ArrayList<CityGene> copy;
    
    private static int elite;
    private static double mutationRate;
    private static int generationNumber;
    private static int populationSize;
    
    private static double initDist;
    private static double finalDist;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DisplayButton;
    private javax.swing.JButton InputButton;
    private javax.swing.JButton OutputButton;
    private javax.swing.JButton RunButton;
    private javax.swing.JTextField TextField;
    public static javax.swing.JPanel TextPanel;
    // End of variables declaration//GEN-END:variables
}
